name: Weekly Commit Report

on:
  schedule:
    - cron: "0 9 * * MON"  # Lunes 09:00 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  report:
    runs-on: ubuntu-latest
    steps:
      - name: Generate weekly report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const since = new Date(Date.now() - 7*24*60*60*1000).toISOString();
            const until = new Date().toISOString();

            // Obtener branch por defecto
            const repoInfo = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoInfo.data.default_branch;

            // Listar commits últimos 7 días en branch por defecto
            const commits = await github.paginate(
              github.rest.repos.listCommits,
              { owner, repo, sha: defaultBranch, since, until, per_page: 100 }
            );

            if (commits.length === 0) {
              core.setOutput("body", "No hubo commits en los últimos 7 días.");
            }

            // Formatear por autor
            const byAuthor = {};
            for (const c of commits) {
              const authorName = (c.commit.author && c.commit.author.name) || (c.author && c.author.login) || "Desconocido";
              if (!byAuthor[authorName]) byAuthor[authorName] = [];
              byAuthor[authorName].push(c);
            }

            function fmtDate(iso) {
              return new Date(iso).toISOString().replace('T',' ').replace('Z',' UTC');
            }

            let body = `Repo: ${owner}/${repo}\nRango: ${since} → ${until}\nBranch: ${defaultBranch}\n\nTotal commits: ${commits.length}\n`;
            body += `\nAutores:\n`;
            for (const [author, arr] of Object.entries(byAuthor)) {
              body += `- ${author}: ${arr.length}\n`;
            }
            body += `\nDetalle:\n`;
            for (const c of commits) {
              const sha = c.sha.substring(0,7);
              const msg = c.commit.message.split('\n')[0];
              const url = c.html_url;
              const when = c.commit.author?.date ? fmtDate(c.commit.author.date) : "s/f";
              const author = (c.commit.author && c.commit.author.name) || (c.author && c.author.login) || "Desconocido";
              body += `- [${sha}](${url}) · ${when} · ${author} · ${msg}\n`;
            }

            // Crear o actualizar Issue "Weekly Commit Report"
            const title = `Weekly Commit Report (${new Date().toISOString().slice(0,10)})`;
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: "open", labels: "weekly-report", per_page: 10
            });

            const existing = issues.find(i => i.title.startsWith("Weekly Commit Report"));
            if (existing) {
              await github.rest.issues.update({ owner, repo, issue_number: existing.number, body, title });
            } else {
              await github.rest.issues.create({
                owner, repo, title, body, labels: ["weekly-report"]
              });
            }